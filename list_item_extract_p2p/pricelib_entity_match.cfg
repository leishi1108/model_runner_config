[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/pricelib_entitiy_match_${date}

[project]
actions = generate, evaluate
datasets = price_library_20254_entity, price_library_merge_entity
evaluators = price_library_entity_predict

[dataset_price_library_20254_label]
class = ExistsDataset
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_20250312
reset = False

[dataset_merge_label]
class = ExistsDataset
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_20250312
reset = False

[dataset_price_library_2025_label]
class = ExistsDataset
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_20250312
reset = False

[dataset_price_library_20252_valid]
class = ExistsDataset
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_20250312
reset = False

[dataset_price_library_20253_valid]
class = ExistsDataset
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_20250312
reset = False



###################### 实体识别结果抽取 #################################

[dataset_price_library_merge]
class = MergeDataset
datasets = merge_label, price_library_2025_label, price_library_20252_valid, price_library_20253_valid, price_library_20254_label

[dataset_price_library_merge_trans]
class = MapDataset
input = price_library_merge
expression = {
    "uid": x["uid"] if "uid" in x else None,
    "分部全路径": x["分部全路径"] if "分部全路径" in x else x["upper_item_name"],
    "名称": x["名称"] if "名称" in x else x["item_name"],
    "项目特征": x["项目特征"] if "项目特征" in x else x["item_feature"],
    "单位": x["单位"] if "单位" in x else None,
    "item_id": x["item_id"],
    "filepath": x["filepath"],
    "list_key": x["list_key"],
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": x["pid"],
    "item_name_wk": x["item_name_wk"],
    "item_feature_wk": x["item_feature_wk"],
    "upper_item_name_wk": x["upper_item_name_wk"],
    "entities": [sub_v|{"source": k} for k, v in x["gde_pricelib_ner_score"]["ner_entities"].items() for sub_v in v ] if "ner_entities" in x["gde_pricelib_ner_score"] and isinstance(x["gde_pricelib_ner_score"]["ner_entities"], dict) else []}

[dataset_price_library_merge_entities]
class = FlatListDataset
input = price_library_merge_trans
list_key = entities

[dataset_price_library_merge_entity]
class = MapDataset
input = price_library_merge_entities
expression = {"text": x["entities"]["内容"] if "entities" in x and x["entities"] is not None else ""}
keep_exists = True

###################### 实体识别结果抽取 #################################


[dataset_price_library_20254_label_trans]
class = MapDataset
input = price_library_20254_label
expression = {
    "uid": x["uid"],
    "分部全路径": x["分部全路径"],
    "名称": x["名称"],
    "项目特征": x["项目特征"],
    "单位": x["单位"],
    "item_id": x["item_id"],
    "filepath": x["filepath"],
    "list_key": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0] + "-" + str(x["uid"]),
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0],
    "item_name_wk": f'清单名称: {x["名称"]}' if x["名称"] is not None else "",
    "item_feature_wk": f'清单特征: {x["项目特征"]}' if x["项目特征"] is not None else "",
    "upper_item_name_wk": f'全路径: {x["分部全路径"]}' if x["分部全路径"] is not None else "",
    "entities": [sub_v|{"source": k} for k, v in x["gde_pricelib_ner_score"]["ner_entities"].items() for sub_v in v ] if "ner_entities" in x["gde_pricelib_ner_score"] and isinstance(x["gde_pricelib_ner_score"]["ner_entities"], dict) else []}



[dataset_price_library_20254_entities]
class = FlatListDataset
input = price_library_20254_label_trans
list_key = entities

[dataset_price_library_20254_entity]
class = MapDataset
input = price_library_20254_entities
expression = {"text": x["entities"]["内容"] if "entities" in x and x["entities"] is not None else ""}
keep_exists = True

[evaluator_price_library_entity_predict]
class = SimplePredictor
datasets = price_library_20254_entity, price_library_merge_entity
models = gde_element_predict, gde_material_predict
num_workers = 6

###################### gde 模型 #################################

[model_gde_pricelib_ner]
class = GDEPriceLibNerServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
need_fields = item_name, item_feature, upper_item_name
re_predict = True


[model_gde_element_predict]
class = GDEElementPredictServiceModel
task_type = 清单
element_content_key = text
re_predict = True

[model_gde_material_predict]
class = GDEMaterialPredictServiceModel
task_type = 清单
material_name_key = text
re_predict = True