[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/pricelib_num_property_${date}

[project]
actions = generate
datasets = raw_price_library_property_trans, raw_price_library_num_property


[dataset_raw_price_library_property]
class = ReadExcelLackKeyDataset
key_cols = uid
feature_cols = costPartial, element, material, sequence
; dir = /home/shilei/corpus/cost_split/分包指导价属性/05-中交一公局北京建筑-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/08-一冶-土建-解析预期结果(工程数据分包指导价).xlsx
dir = /home/shilei/corpus/cost_split/分包指导价属性/02-中化学-全专业-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/03-中建二局华东-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/04-邢台路桥-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/05-中交一公局北京建筑-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/06-中铁七局武汉（房建+公路+市政）-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/07-安徽十七冶-土建路桥-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/08-一冶-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/09-天健建工-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/10-湖北交投-土建市政-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/11-水电九局-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/12-中铁建工五建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/13-兴泰建设-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/15-十五局五-土建安装-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/16-中铁十一电务-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/17-中铁二十五局-土建基建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/18-中铁建工深圳-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/19-中铁建工北京-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/21-中铁建工西南-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/22-中铁建工四川-土建安装-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/24-贵州省建设-上寨-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/24-贵州省建设-土建安装-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/26-亚泰建筑-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/27-八局四-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/28-中化学-海南-土建市政-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/29-中铁十局二-土建市政-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/30-十五冶-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/31-中铁建设南方-土建安装-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/32-中铁五局装饰-土建-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/33-七冶土木-土建市政-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/分包指导价属性/34-中铁二十三局六-土建市政-解析预期结果(工程数据分包指导价).xlsx

[dataset_raw_price_library_property_trans]
class = MapDataset
input = raw_price_library_property
expression = exec('import re; import uuid') or {"item_id": uuid.uuid3(uuid.NAMESPACE_DNS, str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0] + "-" + str(x["uid"])).hex,
    "uid": str(x["uid"]),
    "list_key": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0] + "-" + str(x["uid"]),
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0],
    "item_name_wk": f'清单名称: {x["名称"]}' if x["名称"] is not None else "",
    "item_feature_wk": f'清单特征: {x["项目特征"]}' if x["项目特征"] is not None else "",
    "upper_item_name_wk": f'全路径: {x["分部全路径"]}' if x["分部全路径"] is not None else "",
    "专业预期": x["specialty"],
    "分部分项预期": x["costPartial"],

    "构件预期": ",".join(sorted(set(x["element"].split(",")))) if x["element"] is not None else "",
    "构件属性名称预期": x["element_prop"],
    "构件属性值原始预期": x["element_prop_value"],
    "构件属性值预期": ",".join( sorted( map(lambda x: x["std"], eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )) , key=lambda x: (0, float(x)) if x.replace('.', '', 1).isdigit() else ( 1, str(x) ) ) ) if x["element_prop_value"] is not None and "std" in x["element_prop_value"] else None,

    "构件_属性名称预期": f'{x["element"]}_{x["element_prop"]}',
    "构件_属性名称_属性值预期": ",".join( map( lambda x: f'{x[1]}_{x[2]}_{x[0]}' , zip( sorted( map(lambda x: x["std"], eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )) , key=lambda x: (0, float(x)) if x.replace('.', '', 1).isdigit() else ( 1, str(x) ) ) , [x["element"],]*len(eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )), [x["element_prop"],]*len(eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )) ) ) ) if x["element_prop_value"] is not None and "std" in x["element_prop_value"] else None,

    "构件数值属性": list( sorted( map(lambda x: (x["std"], x["unit"], x["flag"], x["sign"] if "sign" in x else None), eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") ) ), key = lambda x: 0 if x[2] == "single" else ["upper", "upperorequal", "lower", "lowerorequal"].index(x[3]) ) ) if x["element_prop_value"] is not None and "std" in x["element_prop_value"] and "unit" in x["element_prop_value"] else None,

;     "构件数值属性标识": ",".join( map(lambda x: f"{x[2]}" if x[2]=="single" else f"{x[3]}", sorted( map(lambda x: (x["std"], x["unit"], x["flag"], x["sign"] if "sign" in x else None), eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") ) ), key = lambda x: 0 if x[2] == "single" else ["upper", "upperorequal", "lower", "lowerorequal"].index(x[3]) ) ) ) if x["element_prop_value"] is not None and "std" in x["element_prop_value"] and "unit" in x["element_prop_value"] else None,
;
;     "构件数值属性预期": "".join( map( lambda x: f"{round(float(x[0])*1e4)}".zfill(8), sorted( map(lambda x: (x["std"], x["unit"], x["flag"], x["sign"] if "sign" in x else None), eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") ) ), key = lambda x: 0 if x[2] == "single" else ["upper", "upperorequal", "lower", "lowerorequal"].index(x[3]) ) ) )
;
;     if x["element_prop_value"] is not None and "std" in x["element_prop_value"] and "unit" in x["element_prop_value"] and len( eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") ) ) > 1
;
;     else  eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )["flag"] == "single" or ( eval( x["element_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )["flag"] == "range" )
;
;
;     else "0000000000000000",


    "材料预期": ",".join(sorted(set(x["material"].split(",")))) if x["material"] is not None else "",
    "材料属性名称预期": x["material_prop"],
    "材料属性值原始预期": x["material_prop_value"],
    "材料属性值预期": ",".join( sorted( map(lambda x: x["std"], eval( x["material_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") ) ) , key=lambda x: (0, float(x)) if x.replace('.', '', 1).isdigit() else ( 1, str(x) )  ) ) if x["material_prop_value"] is not None and "std" in x["material_prop_value"] else None,

    "材料_属性名称预期": f'{x["material"]}_{x["material_prop"]}',
    "材料_属性名称_属性值预期": ",".join( map( lambda x: f'{x[1]}_{x[2]}_{x[0]}' , zip( sorted( map(lambda x: x["std"], eval( x["material_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )) , key=lambda x: (0, float(x)) if x.replace('.', '', 1).isdigit() else ( 1, str(x) ) ) , [x["material"],]*len(eval( x["material_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )), [x["material_prop"],]*len(eval( x["material_prop_value"].replace("\n", "").replace("\t", "").replace("\r", "") )) ) ) ) if x["material_prop_value"] is not None and "std" in x["material_prop_value"] else None,
    }
keep_exists = True


[dataset_raw_price_library_num_property]
class = MapDataset
input = raw_price_library_property_trans
expression = exec('import re; import uuid') or { "构件数值属性值": "".join( map( lambda x: f"{round(float(x[0])*1e4)}".zfill(8),  x["构件数值属性"] ) ) if x["构件数值属性"] is not None and len( x["构件数值属性"] ) > 1 else f"{round(float(x['构件数值属性'][0][0])*1e4)}".zfill(8) + "0"*8 if x["构件数值属性"] is not None and len( x["构件数值属性"] ) == 1 and ( x["构件数值属性"][0][2] == "single" or x["构件数值属性"][0][3] in ["upper", "upperorequal",] ) else "0"*8 + f"{round(float(x['构件数值属性'][0][0])*1e4)}".zfill(8) if x["构件数值属性"] is not None and len( x["构件数值属性"] ) == 1 and x["构件数值属性"][0][3] in ["lower", "lowerorequal", ] else "0"*16 }
keep_exists = True