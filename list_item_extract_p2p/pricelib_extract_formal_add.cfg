[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_${date}

[project]
actions = generate
datasets = merge_fixed_train, merge_fixed_test, price_library_2025_train, price_library_2025_test, merge_fixed_add2025_train, merge_fixed_add2025_test

###############################

[dataset_raw_yunnan_price_library_data]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/云南建投全量数据0826-解析结果(工程数据分包指导价).xlsx
header_row = 1

[dataset_yunnan_price_library_data_expected]
class = FilterDataset
input = raw_yunnan_price_library_data
filters = "uid.2" in x and x["uid.2"] is not None

[dataset_yunnan_price_library_data]
class = MapDataset
input = yunnan_price_library_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex,
    "list_key": str(x["filepath"]).split("/")[-1].split("-解析结果")[0] + "-" + str(x["uid"]),
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": "云南建设202408",
    "item_name_wk": f'清单名称: {x["名称"]}' if x["名称"] is not None else "",
    "item_feature_wk": f'清单特征: {x["项目特征"]}' if x["项目特征"] is not None else "",
    "upper_item_name_wk": f'全路径: {x["分部全路径"]}' if x["分部全路径"] is not None else "",

    "部位预期": ":".join(map(str, [a for a in [x["群体.1"], x["单体.1"], x["楼层.1"], x["流水段.1"], x["空间.1"], x["配套建筑.1"], x["标段.1"], x["地上地下.1"]] if a is not None])),
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
    "专业预期": x["专业.1"],
    "分部分项预期": x["成本分部分项.1"],
    "构件属性预期":  x["构件属性.1"],
    "材料属性预期":  x["材料属性.1"],
    }
keep_exists = True

###############################

[dataset_raw_labor_decompose_standard_price_library_data]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/y分包指导价清单-解析结果(工程数据分包指导价).xlsx
header_row = 1

[dataset_labor_decompose_standard_price_library_data_expected]
class = FilterDataset
input = raw_labor_decompose_standard_price_library_data
filters = "uid.2" in x and x["uid.2"] is not None


[dataset_labor_decompose_standard_price_library_data]
class = MapDataset
input = labor_decompose_standard_price_library_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex,
    "list_key": str(x["filepath"]).split("/")[-1].split("-解析结果")[0] + "-" + str(x["uid"]),
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": "劳务分包标准",
    "item_name_wk": f'清单名称: {x["名称"]}' if x["名称"] is not None else "",
    "item_feature_wk": f'清单特征: {x["项目特征"]}' if x["项目特征"] is not None else "",
    "upper_item_name_wk": f'全路径: {x["分部全路径"]}' if x["分部全路径"] is not None else "",
    "部位预期": ":".join(map(str, [a for a in [x["群体.1"], x["单体.1"], x["楼层.1"], x["流水段.1"], x["空间.1"], x["配套建筑.1"], x["标段.1"], x["地上地下.1"]] if a is not None])),
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
    "专业预期": x["专业.1"],
    "分部分项预期": x["成本分部分项.1"],
    }

[dataset_labor_decompose_standard_price_library_data_dedup]
class = AccumulateDataset
input = labor_decompose_standard_price_library_data
deduplicate_by = list_key

[dataset_labor_decompose_element_property]
class = MapDataset
input = labor_decompose_standard_price_library_data_expected
expression = {"list_key": str(x["filepath"]).split("/")[-1].split("-解析结果")[0] + "-" + str(x["uid"]),
    "构件属性预期":  x["构件属性.1"]}

[dataset_labor_decompose_element_property_grouped]
class = GroupedDataset
input = labor_decompose_element_property
groupby = list_key
value_key = 构件属性预期

[dataset_labor_decompose_material_property]
class = MapDataset
input = labor_decompose_standard_price_library_data_expected
expression = {"list_key": str(x["filepath"]).split("/")[-1].split("-解析结果")[0] + "-" + str(x["uid"]),
    "材料属性预期":  x["材料属性.1"]}

[dataset_labor_decompose_material_property_grouped]
class = GroupedDataset
input = labor_decompose_material_property
groupby = list_key
value_key = 材料属性预期


[dataset_labor_decompose_mergeElementProperty]
class = MergeIntoDataset
base_dataset = labor_decompose_standard_price_library_data_dedup
merge_datasets = labor_decompose_element_property_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 构件属性预期
reset = False

[dataset_labor_decompose_mergeALL]
class = MergeIntoDataset
base_dataset = labor_decompose_mergeElementProperty
merge_datasets = labor_decompose_material_property_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 材料属性预期
reset = False

##########################################

[dataset_price_library_add_raw_data]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/指导价验证集-2-解析结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/指导价验证数据集_0814-复核-解析结果(工程数据分包指导价).xlsx
header_row = 1

[dataset_price_library_add_data_expected]
class = FilterDataset
input = price_library_add_raw_data
filters = "uid.2" in x and x["uid.2"] is not None


[dataset_price_library_add_data]
class = MapDataset
input = price_library_add_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex,
    "list_key": str(x["filepath"]).split("/")[-1].split("-解析结果")[0] + "-" + str(x["uid"]),
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": str(x["filepath"]).split("/")[-1].split("-解析结果")[0],
    "item_name_wk": f'清单名称: {x["名称"]}' if x["名称"] is not None else "",
    "item_feature_wk": f'清单特征: {x["项目特征"]}' if x["项目特征"] is not None else "",
    "upper_item_name_wk": f'全路径: {x["分部全路径"]}' if x["分部全路径"] is not None else "",
    "部位预期": ":".join(map(str, [a for a in [x["群体.1"], x["单体.1"], x["楼层.1"], x["流水段.1"], x["空间.1"], x["配套建筑.1"], x["标段.1"], x["地上地下.1"]] if a is not None])),
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
    "专业预期": x["专业.1"],
    "分部分项预期": x["成本分部分项.1"],
    "构件属性预期":  x["构件属性.1"],
    "材料属性预期":  x["材料属性.1"],
    }
keep_exists = True

##########################################

[dataset_merge]
class = MergeDataset
datasets = yunnan_price_library_data, price_library_add_data, labor_decompose_mergeALL

[dataset_merge_label]
class = MapDataset
input = merge
expression = {
    "element_label": list(sorted(x["构件预期"].split(","))) if x["构件预期"] is not None and len(x["构件预期"])>0 else [],
    "material_label": list(sorted(x["材料预期"].split(","))) if x["材料预期"] is not None and len(x["材料预期"])>0 else []
    }
keep_exists = True

#################### 对齐标准修改数据 ##################

[dataset_raw_fixed_data]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/stage_test_data_evaluate_pricelib_20241202.xlsx, /home/shilei/corpus/cost_split/stage_train_data_export_pricelib_20241202.xlsx
sheet_names = pred_data
header_row = 0

[dataset_raw_element_fixed_data]
class = FilterDataset
input = raw_fixed_data
filters = "构件预期修改" in x and x["构件预期修改"] is not None

[dataset_element_fixed_data]
class = MapDataset
input = raw_element_fixed_data
expression = {"list_key": str(x["清单id"]),
    "element_label": [] if x["构件预期修改"] == "无构件" else list(sorted(x["构件预期修改"].split(","))),
    }

[dataset_raw_material_fixed_data]
class = FilterDataset
input = raw_fixed_data
filters = "材料预期修改" in x and x["材料预期修改"] is not None

[dataset_material_fixed_data]
class = MapDataset
input = raw_material_fixed_data
expression = {"list_key": str(x["清单id"]),
    "material_label": [] if x["材料预期修改"] == "无材料" else list(sorted(x["材料预期修改"].split(","))),
    }


[dataset_merge_element_fixed_label]
class = MergeIntoDataset
base_dataset = merge_label
merge_datasets = element_fixed_data
merge_type = only_replace
merge_key = list_key
merge_values = element_label
reset = False

[dataset_merge_all_fixed_label]
class = MergeIntoDataset
base_dataset = merge_element_fixed_label
merge_datasets = material_fixed_data
merge_type = only_replace
merge_key = list_key
merge_values = material_label
reset = False


[dataset_merge_fixed_train]
class = FilterDataset
input = merge_all_fixed_label
filters = ("item_id" in x) and ( int(x["item_id"][-5:],16) % 10 >= 2 )

[dataset_merge_fixed_test]
class = FilterDataset
input = merge_all_fixed_label
filters = ("item_id" in x) and ( int(x["item_id"][-5:],16) % 10 < 2 )



################### 2025 新数据集 ##################

[dataset_raw_price_library_2025]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/pricelib_2025/中化学指导价-解析预期结果(工程数据分包指导价).xlsx,/home/shilei/corpus/cost_split/pricelib_2025/1-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/pricelib_2025/101-150_43-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/pricelib_2025/（101-150）7++-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/pricelib_2025/（101-150）9++-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/pricelib_2025/201-300_2-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/pricelib_2025/801-900_22-解析预期结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/pricelib_2025/9-安装-解析预期结果(工程数据分包指导价).xlsx
header_row = 1

[dataset_raw_price_library_2025_trans]
class = MapDataset
input = raw_price_library_2025
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex,
    "list_key": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0] + "-" + str(x["uid"]),
    "item_name": x["名称"],
    "item_feature": x["项目特征"],
    "upper_item_name": x["分部全路径"],
    "pid": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0],
    "item_name_wk": f'清单名称: {x["名称"]}' if x["名称"] is not None else "",
    "item_feature_wk": f'清单特征: {x["项目特征"]}' if x["项目特征"] is not None else "",
    "upper_item_name_wk": f'全路径: {x["分部全路径"]}' if x["分部全路径"] is not None else "",
    "专业预期": x["专业"],
    "分部分项预期": x["成本分部分项"],
    "构件预期": ",".join(sorted(set(x["构件"].split(",")))) if x["构件"] is not None else "",
    "构件属性预期":  x["构件属性"],
    "材料预期": ",".join(sorted(set(x["材料"].split(",")))) if x["材料"] is not None else "",
    "材料属性预期":  x["材料属性"],
    "部位预期": ":".join(map(str, [a for a in [x["群体"], x["单体"], x["楼层"], x["流水段"], x["空间"], x["配套建筑"], x["标段"], x["地上地下"]] if a is not None])),
    }
keep_exists = True


[dataset_raw_price_library_2025_dedup]
class = AccumulateDataset
input = raw_price_library_2025_trans
deduplicate_by = list_key


[dataset_price_library_2025_partial]    ## GTJ 不解析分部分项
class = MapDataset
input = raw_price_library_2025_trans
expression = {"list_key": x["list_key"], "分部分项预期": x["分部分项预期"]}

[dataset_price_library_2025_partial_grouped]
class = GroupedDataset
input = price_library_2025_partial
groupby = list_key
value_key = 分部分项预期


[dataset_price_library_2025_element]
class = MapDataset
input = raw_price_library_2025_trans
expression = {"list_key": x["list_key"], "构件预期": x["构件预期"]}

[dataset_price_library_2025_element_grouped]
class = GroupedDataset
input = price_library_2025_element
groupby = list_key
value_key = 构件预期

[dataset_price_library_2025_material]
class = MapDataset
input = raw_price_library_2025_trans
expression = {"list_key": x["list_key"], "材料预期": x["材料预期"]}

[dataset_price_library_2025_material_grouped]
class = GroupedDataset
input = price_library_2025_material
groupby = list_key
value_key = 材料预期


[dataset_price_library_2025_mergeElement]
class = MergeIntoDataset
base_dataset = raw_price_library_2025_dedup
merge_datasets = price_library_2025_element_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 构件预期
reset = False

[dataset_price_library_2025_mergeMaterial]
class = MergeIntoDataset
base_dataset = price_library_2025_mergeElement
merge_datasets = price_library_2025_material_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 材料预期
reset = False


[dataset_price_library_2025]
class = MergeIntoDataset
base_dataset = price_library_2025_mergeMaterial
merge_datasets = price_library_2025_partial_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 分部分项预期
reset = False

[dataset_price_library_2025_valid]
class = FilterDataset
input = price_library_2025
filters = x["专业预期"] in ["土建专业", "装修专业"]


################# 2025 新数据集 修改标注 #################

[dataset_raw_price_library_2025_fixed]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/price_library_2025_export_20241227.xlsx
sheet_names = 全数据
header_row = 0

[dataset_raw_price_library_2025_element_fixed]
class = FilterDataset
input = raw_price_library_2025_fixed
filters = "构件预期修改" in x and x["构件预期修改"] is not None

[dataset_price_library_2025_element_fixed]
class = MapDataset
input = raw_price_library_2025_element_fixed
expression = {"list_key": str(x["清单id"]),
    "构件预期": "" if x["构件预期修改"] == "无构件" else ",".join(sorted(set(x["构件预期修改"].split(",")))),
    }

[dataset_raw_price_library_2025_material_fixed]
class = FilterDataset
input = raw_price_library_2025_fixed
filters = "材料预期修改" in x and x["材料预期修改"] is not None

[dataset_price_library_2025_material_fixed]
class = MapDataset
input = raw_price_library_2025_material_fixed
expression = {"list_key": str(x["清单id"]),
    "材料预期": "" if x["材料预期修改"] == "无材料" else ",".join(sorted(set(x["材料预期修改"].split(",")))),
    }

[dataset_price_library_2025_element_fixed_label]
class = MergeIntoDataset
base_dataset = price_library_2025_valid
merge_datasets = price_library_2025_element_fixed
merge_type = only_replace
merge_key = list_key
merge_values = 构件预期
reset = False

[dataset_price_library_2025_all_fixed_label]
class = MergeIntoDataset
base_dataset = price_library_2025_element_fixed_label
merge_datasets = price_library_2025_material_fixed
merge_type = only_replace
merge_key = list_key
merge_values = 材料预期
reset = False


[dataset_price_library_2025_label]
class = MapDataset
input = price_library_2025_all_fixed_label
expression = {
    "element_label": list(sorted(x["构件预期"].split(","))) if x["构件预期"] is not None and len(x["构件预期"])>0 else [],
    "material_label": list(sorted(x["材料预期"].split(","))) if x["材料预期"] is not None and len(x["材料预期"])>0 else []
    }
keep_exists = True


[dataset_price_library_2025_train]
class = FilterDataset
input = price_library_2025_label
filters = "pid" in x and x["pid"] in ["101-150_43", "201-300_2", "801-900_22", "9-安装"]

[dataset_price_library_2025_test]
class = FilterDataset
input = price_library_2025_label
filters = "pid" in x and x["pid"] in ["1", "中化学指导价", "（101-150）7++", "（101-150）9++"]

###########################################

[dataset_merge_fixed_add2025_train]
class = MergeDataset
datasets = merge_fixed_train, price_library_2025_train

[dataset_merge_fixed_add2025_test]
class = MergeDataset
datasets = merge_fixed_test, price_library_2025_test


###########################################

[model_gde_pricelib]
class = GDEPriceLibServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
need_fields = item_name, item_feature, upper_item_name
re_predict = True

[model_gde_pricelib_rule]
class = GDEPriceLibRuleServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
need_fields = item_name, item_feature, upper_item_name
re_predict = True



########################################################################################################################




