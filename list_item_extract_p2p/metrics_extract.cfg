[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/metrics_extract_${date}

[project]
actions = generate, evaluate, run
datasets = metrics_data, metrics_leaf, metrics_data_leaf, metrics_data_leaf_valid, metrics_data_for_export
evaluators = metrics_data_gde_predict
stages = metrics_data_export

[dataset_raw_metrics_leaf]
class = ReadExcelDataset
dir = /home/shilei/corpus/metrics_subject/indicator_subject_leaf.xlsx
header_row = 0


[dataset_metrics_leaf]
class = MapDataset
input = raw_metrics_leaf
expression = exec('import re; import uuid') or {"leaf_key": x["工程ID"]+"-"+str(x["指标科目ID"])}
keep_exists = True


[dataset_raw_metrics_data]
class = ReadExcelDataset
dir = /home/shilei/corpus/metrics_subject/项目7801-成本科目-土建-解析结果(指标成本科目).xlsx,/home/shilei/corpus/metrics_subject/项目7803-成本科目-土建-解析结果(指标成本科目).xlsx,/home/shilei/corpus/metrics_subject/项目7805-成本科目-土建-解析结果(指标成本科目).xlsx,/home/shilei/corpus/metrics_subject/项目7807-成本科目-土建-解析结果(指标成本科目).xlsx
header_row = 1

[dataset_metrics_data_expected]
class = FilterDataset
input = raw_metrics_data
filters = "uid.2" in x and x["uid.2"] is not None

[dataset_metrics_data]
class = MapDataset
input = metrics_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex, "item_name": x["科目名称"], "upper_item_name": x["全路径"], "pid": str(x["filepath"]).split("/")[-1].split("-解析结果")[0], "leaf_key": str(x["filepath"]).split("/")[-1].split("-解析结果")[0]+"-"+str(x["uid"])}
keep_exists = True

[dataset_metrics_data_leaf]
class = MergeIntoDataset
base_dataset = metrics_data
merge_datasets = metrics_leaf
merge_type = only_replace
merge_key = leaf_key
merge_values = 是否叶子结点
reset = False

[dataset_metrics_data_leaf_valid]
class = FilterDataset
input = metrics_data_leaf
filters = x["是否叶子结点"] == "是"


[dataset_metrics_data_for_export]
class = MapDataset
input = metrics_data
expression = {"project_id": x["pid"],
    "指标科目部位": ",".join(map(str, x["gde_indicator_score"]["space"]+x["gde_indicator_score"]["supporting"]+x["gde_indicator_score"]["up-or-down"])),
    "指标科目专业": ",".join(map(str, sorted(x["gde_indicator_score"]["specialty"]))),
    "指标科目分部分项": ",".join(map(str, sorted(x["gde_indicator_score"]["cost-partial"]))),
    "指标科目构件": ",".join(sorted(x["gde_indicator_score"]["element"])),
;     "指标科目构件属性": ",".join(map(str, sorted(x["gde_indicator_score"]["element_property"]))),
    "指标科目材料": ",".join(sorted(x["gde_indicator_score"]["material"])),
;     "指标科目材料属性": ",".join(map(str, sorted(x["cde_indicator_subject_score"]["material_property"]))),

    "部位预期": ":".join(map(str, [a for a in [x["空间.1"], x["配套建筑.1"], x["地上地下.1"]] if a is not None])),
    "专业预期": ",".join(sorted(x["专业.1"].split(","))) if x["专业.1"] is not None else "",
    "分部分项预期": ",".join(sorted(x["成本分部分项.1"].split(","))) if x["成本分部分项.1"] is not None else "",
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
;     "构件属性预期": ",".join(sorted(x["构件属性.1"].split(","))) if x["构件属性.1"] is not None else "",
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
;     "材料属性预期": ",".join(sorted(x["材料属性.1"].split(","))) if x["材料属性.1"] is not None else "",
    }
extra_dependencies = evaluator_metrics_data_gde_predict
keep_exists = True


[stage_metrics_data_export]
class = DatasetExportStage
dataset = metrics_data_for_export
output_fields = project_id, uid, upper_item_name, item_name, 指标科目部位, 指标科目专业, 指标科目分部分项, 指标科目构件, 指标科目材料, 部位预期, 专业预期, 分部分项预期, 构件预期, 材料预期
output_names = 工程ID, 指标科目ID, 上级指标科目名称, 指标科目名称, 指标科目部位, 指标科目专业, 指标科目分部分项, 指标科目构件, 指标科目材料, 部位预期, 专业预期, 分部分项预期, 构件预期, 材料预期
save_res_path = /home/shilei/fbpmx/list_extract/metrics_extract_${date}/metrics_data_export.xlsx


[evaluator_metrics_data_gde_predict]
class = SimplePredictor
datasets = metrics_data_leaf_valid
models = cde_cost_subject, list_tjqd2, gde_indicator
num_workers = 8


[model_gde_indicator]
class = GDEIndicatorSubjectModel
task_type = 指标科目
item_name_key = item_name
upper_item_name_key = upper_item_name
need_fields = item_name, upper_item_name


[model_cde_cost_subject]
class = CdeServiceModel
task_type = 成本科目
item_name_key = item_name
item_feature_key = upper_item_name
need_fields = item_name, upper_item_name

[model_list_tjqd2]
class = GDETJQD2ServiceModel
task_type = 清单
item_name_key = item_name
upper_item_name_key = upper_item_name
need_fields = item_name,upper_item_name