[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/list_extract_analysis_${date}

[project]
actions = generate
datasets = budget_list_feature_dedup, budget_list_data_test, budget_list_data_train
evaluators = cde_predict
stages = budget_list_data_test_data_export

[dataset_raw_list_data]
class = ReadFileDataset
format = json
dir = /home/shilei/corpus/cost_split/list_extract_expected_data.json


[dataset_list_data]
class = MapDataset
input = raw_list_data
expression = exec('import re; import uuid') or {"project_id": uuid.uuid3(uuid.NAMESPACE_DNS, str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0]).hex, "list_key": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0] + "-" + str(x["ID"])}
keep_exists = True


[dataset_GTJ_list_data]
class = FilterDataset
input = list_data
filters = "单位工程名称" in x

[dataset_budget_list_data]
class = FilterDataset
input = list_data
filters = "单位工程名称" not in x


############ 成本科目预算清单解析 ############

[dataset_budget_list_feature]
class = MapDataset
input = budget_list_data
expression = {"project_id": x["project_id"], "list_key": x["list_key"], "ID": x["ID"], "filepath": x["filepath"], "项目ID": x["项目ID"],
              "清单编码": x["清单编码"], "清单名称": x["清单名称"], "项目特征": x["项目特征"], "全路径": x["全路径"], "工程名称": x["工程名称"],
              "item_name": x["清单名称"] if x["清单名称"] is not None else "", "item_feature": x["项目特征"] if x["项目特征"] is not None else "",
              "upper_item_name": x["全路径"] if x["全路径"] is not None else "", "project_name": x["工程名称"] if x["工程名称"] is not None else ""}


[dataset_budget_list_feature_dedup]
class = AccumulateDataset
input = budget_list_feature
deduplicate_by = list_key

############ 预期结果解析 ############

[dataset_budget_list_partial]    ## GTJ 不解析分部分项
class = MapDataset
input = budget_list_data
expression = {"list_key": x["list_key"], "成本分部分项": x["成本分部分项"]}

[dataset_budget_list_partial_grouped]
class = GroupedDataset
input = budget_list_partial
groupby = list_key
value_key = 成本分部分项

[dataset_list_element]
class = MapDataset
input = list_data
expression = {"list_key": x["list_key"], "构件": x["构件"]}

[dataset_list_element_grouped]
class = GroupedDataset
input = list_element
groupby = list_key
value_key = 构件

[dataset_list_material]
class = MapDataset
input = list_data
expression = {"list_key": x["list_key"], "材料": x["材料"]}

[dataset_list_material_grouped]
class = GroupedDataset
input = list_material
groupby = list_key
value_key = 材料

############ 预期结果合并 ############

[dataset_budget_list_data_mergeElement]
class = MergeIntoDataset
base_dataset = budget_list_feature_dedup
merge_datasets = list_element_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 构件
reset = False

[dataset_budget_list_data_mergeMaterial]
class = MergeIntoDataset
base_dataset = budget_list_data_mergeElement
merge_datasets = list_material_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 材料
reset = False

[dataset_budget_list_data_mergeAll]
class = MergeIntoDataset
base_dataset = budget_list_data_mergeMaterial
merge_datasets = budget_list_partial_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 成本分部分项
reset = False

############ 数据分割 ############


[dataset_budget_list_data_test]
class = FilterDataset
input = budget_list_data_mergeAll
filters = ("project_id" in x) and ( int(x["project_id"][-5:],16) % 10 < 2 )

[dataset_budget_list_data_train]
class = FilterDataset
input = budget_list_data_mergeAll
filters = ("project_id" in x) and ( int(x["project_id"][-5:],16) % 10 >= 2 )

############ 构件/材料 评估 ############

[model_cde]
class = CdeServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
project_name_key = project_name
need_fields = item_name,item_feature,upper_item_name,project_name


[evaluator_cde_predict]
class = SimplePredictor
datasets = budget_list_data_test
models = cde
num_workers = 4

############ analysis ############

[dataset_budget_list_data_test_data_for_export]
class = MapDataset
input = budget_list_data_test
expression = {
    "构件": ",".join(sorted(x["cde_score"]["element"])),
    "材料": ",".join(sorted(x["cde_score"]["material"])),
    "分部分项": ",".join(map(str, sorted(x["cde_score"]["cost-partial"]))),
    "材料实体": ",".join(sorted(set([str(a["text"]+"->"+a["item_standard"]) for a in x["cde_score"]["debug"]["material"]]))),
    "构件实体": ",".join(sorted(set([str(a["text"]+"->"+a["item_standard"]) for a in x["cde_score"]["debug"]["element"]]))),
    "构件预期": ",".join(sorted(x["构件"].split(","))) if x["构件"] is not None else "",
    "材料预期": ",".join(sorted(x["材料"].split(","))) if x["材料"] is not None else "",
    "分部分项预期": x["成本分部分项"],
    }
extra_dependencies = evaluator_cde_predict
keep_exists = True

[stage_budget_list_data_test_data_export]
class = DatasetExportStage
dataset = budget_list_data_test_data_for_export
output_fields = list_key, upper_item_name, item_name, item_feature, 分部分项, 构件, 材料, 分部分项预期, 构件预期, 材料预期, 构件实体, 材料实体
output_names = 清单id, 上级名称, 清单名称, 清单特征, 分部分项, 构件, 材料, 分部分项预期, 构件预期, 材料预期, 构件实体, 材料实体
save_res_path = /home/shilei/fbpmx/list_extract/list_extract_analysis_${date}/budget_list_data_test_data_export.xlsx

