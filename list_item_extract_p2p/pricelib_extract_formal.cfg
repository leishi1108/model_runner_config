[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_${date}

[project]
actions = generate, evaluate, run
datasets = yunnan_price_library_data_expected, labor_decompose_standard_price_library_data_expected, price_library_add_data
evaluators = gde_predict, labor_decompose_standard_gde_predict, add_data_gde_predict
stages = yunnan_price_library_data_export, labor_decompose_standard_price_library_data_export, price_library_add_data_evaluate

[dataset_raw_yunnan_price_library_data]
class = ReadExcelDataset
; dir = /home/shilei/corpus/cost_split/工程数据分包指导价库_云南建投202408-解析结果(工程数据分包价格库).xlsx
dir = /home/shilei/corpus/cost_split/云南建投全量数据0826-解析结果(工程数据分包指导价).xlsx
header_row = 1


[dataset_yunnan_price_library_data_expected]
class = FilterDataset
input = raw_yunnan_price_library_data
filters = "uid.2" in x and x["uid.2"] is not None

[dataset_yunnan_price_library_data]
class = MapDataset
input = yunnan_price_library_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex, "item_name": x["名称"], "item_feature": x["项目特征"], "upper_item_name": x["分部全路径"], "pid": "云南建设202408"}
keep_exists = True


[dataset_yunnan_price_library_data_for_export]
class = MapDataset
input = yunnan_price_library_data
expression = {"project_id": x["pid"],
    "指导价部位": ",".join(map(str, x["yunnan_gde_pricelib_score"]["group"]+x["yunnan_gde_pricelib_score"]["building"]+x["yunnan_gde_pricelib_score"]["floor"]+x["yunnan_gde_pricelib_score"]["section"]+x["yunnan_gde_pricelib_score"]["space"]+x["yunnan_gde_pricelib_score"]["supporting"]+x["yunnan_gde_pricelib_score"]["lot"]+x["yunnan_gde_pricelib_score"]["up-or-down"])),
    "指导价构件": ",".join(sorted(x["yunnan_gde_pricelib_score"]["element"])),
    "指导价构件属性": x["yunnan_gde_pricelib_score"]["element_property"],
    "指导价材料": ",".join(sorted(x["yunnan_gde_pricelib_score"]["material"])),
    "指导价材料属性": x["yunnan_gde_pricelib_score"]["material_property"],

    "指导价专业": ",".join(map(str, sorted(x["yunnan_gde_pricelib_score"]["specialty"]))),
    "指导价新专业": ",".join(map(str, sorted(x["yunnan_gde_pricelib_score"]["specialty_new"]))),
    "指导价分部分项": ",".join(map(str, sorted(x["yunnan_gde_pricelib_score"]["cost-partial"]))),

    "指导价材料实体": ",".join(sorted(set([a["内容"] for a in x["yunnan_gde_pricelib_score"]["ner_entities"]["name_entity"]+x["yunnan_gde_pricelib_score"]["ner_entities"]["att_entity"] if "材料" in a["类型"] and a["被排除"] is False]))),
    "指导价构件实体": ",".join(sorted(set([a["内容"] for a in x["yunnan_gde_pricelib_score"]["ner_entities"]["name_entity"]+x["yunnan_gde_pricelib_score"]["ner_entities"]["att_entity"] if a["类型"]=="构件" and a["被排除"] is False]))),

    "部位预期": ":".join(map(str, [a for a in [x["群体.1"], x["单体.1"], x["楼层.1"], x["流水段.1"], x["空间.1"], x["配套建筑.1"], x["标段.1"], x["地上地下.1"]] if a is not None])),
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
    "构件属性预期": x["构件属性.1"],
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
    "材料属性预期": x["材料属性.1"],
    "专业预期": x["专业.1"],
    "分部分项预期": x["成本分部分项.1"],
    }
extra_dependencies = evaluator_gde_predict
keep_exists = True


[stage_yunnan_price_library_data_export]
class = DatasetValStage
dataset = yunnan_price_library_data_for_export
output_fields = project_id, uid, upper_item_name, item_name, item_feature, 指导价部位, 指导价专业, 指导价分部分项, 指导价构件, 指导价构件属性, 指导价材料, 指导价材料属性, 部位预期, 专业预期, 分部分项预期, 构件预期, 构件属性预期, 材料预期, 材料属性预期, 指导价构件实体, 指导价材料实体, 指导价新专业
output_names = 工程ID, 指导价ID, 上级指导价名称, 指导价名称, 指导价特征, 指导价部位, 指导价专业, 指导价分部分项, 指导价构件, 指导价构件属性, 指导价材料, 指导价材料属性, 部位预期, 专业预期, 分部分项预期, 构件预期, 构件属性预期, 材料预期, 材料属性预期, 指导价构件实体, 指导价材料实体, 指导价新专业
save_res_path = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_${date}/yunnan_price_library_data_export.xlsx
map_dict = {"指导价专业":"专业预期", "指导价分部分项":"分部分项预期", "指导价构件":"构件预期", "指导价构件属性":"构件属性预期", "指导价材料":"材料预期", "指导价材料属性":"材料属性预期", "指导价工序":"工序预期", "指导价空间":"空间预期", "指导价配套建筑":"配套建筑预期", "指导价地上地下":"地上地下预期",}



###############################

[dataset_raw_labor_decompose_standard_price_library_data]
class = ReadExcelDataset
; dir = /home/shilei/corpus/cost_split/指导价验证集-劳务分包标准-解析结果(工程数据分包指导价).xlsx
dir = /home/shilei/corpus/cost_split/y分包指导价清单-解析结果(工程数据分包指导价).xlsx
header_row = 1


[dataset_labor_decompose_standard_price_library_data_expected]
class = FilterDataset
input = raw_labor_decompose_standard_price_library_data
filters = "uid.2" in x and x["uid.2"] is not None

[dataset_labor_decompose_standard_price_library_data]
class = MapDataset
input = labor_decompose_standard_price_library_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex, "item_name": x["名称"], "item_feature": x["项目特征"], "upper_item_name": x["分部全路径"], "pid": "劳务分包标准"}
keep_exists = True


[dataset_labor_decompose_standard_price_library_data_for_export]
class = MapDataset
input = labor_decompose_standard_price_library_data
expression = {"project_id": x["pid"],
    "指导价部位": ",".join(map(str, x["labor_decompose_standard_gde_pricelib_score"]["group"]+x["labor_decompose_standard_gde_pricelib_score"]["building"]+x["labor_decompose_standard_gde_pricelib_score"]["floor"]+x["labor_decompose_standard_gde_pricelib_score"]["section"]+x["labor_decompose_standard_gde_pricelib_score"]["space"]+x["labor_decompose_standard_gde_pricelib_score"]["supporting"]+x["labor_decompose_standard_gde_pricelib_score"]["lot"]+x["labor_decompose_standard_gde_pricelib_score"]["up-or-down"])),
    "指导价构件": ",".join(sorted(x["labor_decompose_standard_gde_pricelib_score"]["element"])),
    "指导价构件属性": x["labor_decompose_standard_gde_pricelib_score"]["element_property"],
    "指导价材料": ",".join(sorted(x["labor_decompose_standard_gde_pricelib_score"]["material"])),
    "指导价材料属性": x["labor_decompose_standard_gde_pricelib_score"]["material_property"],

    "指导价专业": ",".join(map(str, sorted(x["labor_decompose_standard_gde_pricelib_score"]["specialty"]))),
    "指导价新专业": ",".join(map(str, sorted(x["labor_decompose_standard_gde_pricelib_score"]["specialty_new"]))),
    "指导价分部分项": ",".join(map(str, sorted(x["labor_decompose_standard_gde_pricelib_score"]["cost-partial"]))),

    "指导价材料实体": ",".join(sorted(set([a["内容"] for a in x["labor_decompose_standard_gde_pricelib_score"]["ner_entities"]["name_entity"]+x["labor_decompose_standard_gde_pricelib_score"]["ner_entities"]["att_entity"] if "材料" in a["类型"] and a["被排除"] is False]))),
    "指导价构件实体": ",".join(sorted(set([a["内容"] for a in x["labor_decompose_standard_gde_pricelib_score"]["ner_entities"]["name_entity"]+x["labor_decompose_standard_gde_pricelib_score"]["ner_entities"]["att_entity"] if a["类型"]=="构件" and a["被排除"] is False]))),

    "部位预期": ":".join(map(str, [a for a in [x["群体.1"], x["单体.1"], x["楼层.1"], x["流水段.1"], x["空间.1"], x["配套建筑.1"], x["标段.1"], x["地上地下.1"]] if a is not None])),
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
    "构件属性预期": x["构件属性.1"],
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
    "材料属性预期": x["材料属性.1"],
    "专业预期": x["专业.1"],
    "分部分项预期": x["成本分部分项.1"],
    }
extra_dependencies = evaluator_labor_decompose_standard_gde_predict
keep_exists = True

[stage_labor_decompose_standard_price_library_data_export]
class = DatasetValStage
dataset = labor_decompose_standard_price_library_data_for_export
output_fields = project_id, uid, upper_item_name, item_name, item_feature, 指导价部位, 指导价专业, 指导价分部分项, 指导价构件, 指导价构件属性, 指导价材料, 指导价材料属性, 部位预期, 专业预期, 分部分项预期, 构件预期, 构件属性预期, 材料预期, 材料属性预期, 指导价构件实体, 指导价材料实体, 指导价新专业
output_names = 工程ID, 指导价ID, 上级指导价名称, 指导价名称, 指导价特征, 指导价部位, 指导价专业, 指导价分部分项, 指导价构件, 指导价构件属性, 指导价材料, 指导价材料属性, 部位预期, 专业预期, 分部分项预期, 构件预期, 构件属性预期, 材料预期, 材料属性预期, 指导价构件实体, 指导价材料实体, 指导价新专业
save_res_path = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_${date}/labor_decompose_standard_price_library_data_export.xlsx
map_dict = {"指导价专业":"专业预期", "指导价分部分项":"分部分项预期", "指导价构件":"构件预期", "指导价构件属性":"构件属性预期", "指导价材料":"材料预期", "指导价材料属性":"材料属性预期", "指导价工序":"工序预期", "指导价空间":"空间预期", "指导价配套建筑":"配套建筑预期", "指导价地上地下":"地上地下预期",}


###############################

[evaluator_gde_predict]
class = SimplePredictor
datasets = yunnan_price_library_data
models = yunnan_gde_pricelib
num_workers = 8

[model_yunnan_gde_pricelib]
class = GDETPriceLibServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
need_fields = item_name, item_feature, upper_item_name

[model_yunnan_cde_cost_subject]
class = CdeServiceModel
task_type = 成本科目
item_name_key = item_name
item_feature_key = upper_item_name
need_fields = item_name, upper_item_name



[evaluator_labor_decompose_standard_gde_predict]
class = SimplePredictor
datasets = labor_decompose_standard_price_library_data
models = labor_decompose_standard_gde_pricelib
num_workers = 8


[model_labor_decompose_standard_gde_pricelib]
class = GDETPriceLibServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
need_fields = item_name, item_feature, upper_item_name

[model_labor_decompose_standard_cde_cost_subject]
class = CdeServiceModel
task_type = 成本科目
item_name_key = item_name
item_feature_key = upper_item_name
need_fields = item_name, upper_item_name


############### 训练集 ##########################


[dataset_price_library_add_raw_data]
class = ReadExcelDataset
dir = /home/shilei/corpus/cost_split/指导价验证集-2-解析结果(工程数据分包指导价).xlsx, /home/shilei/corpus/cost_split/指导价验证数据集_0814-复核-解析结果(工程数据分包指导价).xlsx
header_row = 1

[dataset_price_library_add_data_expected]
class = FilterDataset
input = price_library_add_raw_data
filters = "uid.2" in x and x["uid.2"] is not None

[dataset_price_library_add_data]
class = MapDataset
input = price_library_add_data_expected
expression = exec('import re; import uuid') or {"item_id": uuid.uuid4().hex, "item_name": x["名称"], "item_feature": x["项目特征"], "upper_item_name": x["分部全路径"], "pid": str(x["filepath"]).split("/")[-1].split("-解析结果")[0]}
keep_exists = True

[model_gde_pricelib]
class = GDETPriceLibServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
upper_item_name_key = upper_item_name
need_fields = item_name, item_feature, upper_item_name

[evaluator_add_data_gde_predict]
class = SimplePredictor
datasets = price_library_add_data
models = gde_pricelib
num_workers = 8


[dataset_price_library_add_data_for_evaluate]
class = MapDataset
input = price_library_add_data
expression = {"project_id": x["pid"],
    "指导价专业": ",".join(map(str, sorted(x["gde_pricelib_score"]["specialty"]))),
    "指导价分部分项": ",".join(map(str, sorted(x["gde_pricelib_score"]["cost-partial"]))),
    "指导价构件": ",".join(map(str, sorted(x["gde_pricelib_score"]["element"]))),
    "指导价构件属性": ",".join([f"{m[0]}:{m[1]}" for m in sorted({k:','.join(map(str, [sub_v['std'] for sub_v in v])) if isinstance(v, list) else f"{k}:{v['std']}" for p in x["gde_pricelib_score"]["element_property"] for k, v in eval(p).items()}.items(), key=lambda x: x[0])]),
    "指导价材料": ",".join(map(str, sorted(x["gde_pricelib_score"]["material"]))),
    "指导价材料属性": ",".join([f"{k}:{','.join(map(str, sorted(v)))}" if isinstance(v, list) else f"{k}:{v}" for p in x["gde_pricelib_score"]["material_property"] for k, v in eval(p).items()]),
    "指导价工序": ",".join(map(str, sorted(x["gde_pricelib_score"]["sequence"]))),
    "指导价空间": ",".join(map(str, sorted(x["gde_pricelib_score"]["space"]))).replace(":", ""),
    "指导价配套建筑": ",".join(map(str, sorted(x["gde_pricelib_score"]["supporting"]))).replace(":", ""),
    "指导价地上地下": ",".join(map(str, sorted(x["gde_pricelib_score"]["up-or-down"]))).replace(":", ""),


    "专业预期": ",".join(sorted(x["专业.1"].split(","))) if x["专业.1"] is not None else "",
    "分部分项预期": ",".join(sorted(x["成本分部分项.1"].split(","))) if x["成本分部分项.1"] is not None else "",
    "构件预期": ",".join(sorted(x["构件.1"].split(","))) if x["构件.1"] is not None else "",
    "构件属性预期": ",".join(f"{k}:{v}"for k, v in sorted(json.loads(x["构件属性.1"]).items(), key=lambda x: x[0])) if x["构件属性.1"] is not None else "",
    "材料预期": ",".join(sorted(x["材料.1"].split(","))) if x["材料.1"] is not None else "",
    "材料属性预期": ",".join(f"{k}:{v}"for k, v in sorted(json.loads(x["材料属性.1"]).items(), key=lambda x: x[0])) if x["材料属性.1"] is not None else "",
    "工序预期": ",".join(sorted(x["工序.1"].split(","))) if x["工序.1"] is not None else "",
    "空间预期": ",".join(sorted(x["空间.1"].split(","))) if x["空间.1"] is not None else "",
    "配套建筑预期": ",".join(sorted(x["配套建筑.1"].split(","))) if x["配套建筑.1"] is not None else "",
    "地上地下预期": ",".join(sorted(x["地上地下.1"].split(","))) if x["地上地下.1"] is not None else "",

    }
extra_dependencies = evaluator_add_data_gde_predict
keep_exists = True

[stage_price_library_add_data_evaluate]
class = DatasetValStage
dataset = price_library_add_data_for_evaluate
output_fields = project_id, uid, upper_item_name, item_name, item_feature, 指导价专业, 专业预期, 指导价分部分项, 分部分项预期, 指导价构件, 构件预期, 指导价构件属性, 构件属性预期, 指导价材料, 材料预期, 指导价材料属性, 材料属性预期, 指导价工序, 工序预期, 指导价空间, 空间预期, 指导价配套建筑, 配套建筑预期, 指导价地上地下, 地上地下预期
output_names = 工程ID, 指导价ID, 上级指导价名称, 指导价名称, 指导价特征, 指导价专业, 专业预期, 指导价分部分项, 分部分项预期, 指导价构件, 构件预期, 指导价构件属性, 构件属性预期, 指导价材料, 材料预期, 指导价材料属性, 材料属性预期, 指导价工序, 工序预期, 指导价空间, 空间预期, 指导价配套建筑, 配套建筑预期, 指导价地上地下, 地上地下预期
save_res_path = /home/shilei/fbpmx/list_extract/pricelib_extract_formal_${date}/price_library_add_data_evaluate.xlsx
map_dict = {"指导价专业":"专业预期", "指导价分部分项":"分部分项预期", "指导价构件":"构件预期", "指导价构件属性":"构件属性预期", "指导价材料":"材料预期", "指导价材料属性":"材料属性预期", "指导价工序":"工序预期", "指导价空间":"空间预期", "指导价配套建筑":"配套建筑预期", "指导价地上地下":"地上地下预期",}

