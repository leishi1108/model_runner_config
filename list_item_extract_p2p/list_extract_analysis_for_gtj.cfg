[DEFAULT]
workspace = /home/shilei/fbpmx/list_extract/list_extract_analysis_for_gtj_${date}

[project]
actions = generate
datasets = GTJ_list_feature_dedup, GTJ_list_data_test, GTJ_list_data_train, GTJ_list_data_test_label, GTJ_list_data_train_label
; models = list_extract_model, list_extract_model2
; evaluators = cde_predict, list_element_extract_evaluate, list_material_extract_evaluate
; stages = budget_list_data_test_data_export, budget_list_data_test_label_export

[dataset_raw_list_data]
class = ReadFileDataset
format = json
dir = /home/shilei/corpus/cost_split/list_extract_expected_data.json


[dataset_list_data]
class = MapDataset
input = raw_list_data
expression = exec('import re; import uuid') or {"project_id": uuid.uuid3(uuid.NAMESPACE_DNS, str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0]).hex, "list_key": str(x["filepath"]).split("/")[-1].split("-解析预期结果")[0] + "-" + str(x["ID"])}
keep_exists = True


[dataset_GTJ_list_data]
class = FilterDataset
input = list_data
filters = "单位工程名称" in x

[dataset_budget_list_data]
class = FilterDataset
input = list_data
filters = "单位工程名称" not in x

############ GTJ清单解析 ############

[dataset_GTJ_list_feature]
class = MapDataset
input = GTJ_list_data
expression = {"project_id": x["project_id"], "list_key": x["list_key"], "ID": x["ID"], "filepath": x["filepath"], "单位工程名称": x["单位工程名称"],
              "全路径": x["全路径"], "清单编码": x["清单编码"], "清单名称": x["清单名称"], "清单特征": x["清单特征"], "单位": x["单位"],
              "item_name": x["清单名称"] if x["清单名称"] is not None else "", "item_feature": x["清单特征"] if x["清单特征"] is not None else "",
              "upper_item_name": x["全路径"] if x["全路径"] is not None else "", "project_name": x["单位工程名称"] if x["单位工程名称"] is not None else ""}


[dataset_GTJ_list_feature_dedup]
class = AccumulateDataset
input = GTJ_list_feature
deduplicate_by = list_key


############ 预期结果解析 ##################

[dataset_list_element]
class = MapDataset
input = list_data
expression = {"list_key": x["list_key"], "构件": x["构件"]}

[dataset_list_element_grouped]
class = GroupedDataset
input = list_element
groupby = list_key
value_key = 构件

[dataset_list_material]
class = MapDataset
input = list_data
expression = {"list_key": x["list_key"], "材料": x["材料"]}

[dataset_list_material_grouped]
class = GroupedDataset
input = list_material
groupby = list_key
value_key = 材料

############ 预期结果合并 ############

[dataset_GTJ_list_data_mergeElement]
class = MergeIntoDataset
base_dataset = GTJ_list_feature_dedup
merge_datasets = list_element_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 构件
reset = False

[dataset_GTJ_list_data_mergeAll]
class = MergeIntoDataset
base_dataset = GTJ_list_data_mergeElement
merge_datasets = list_material_grouped
merge_type = only_replace
merge_key = list_key
merge_values = 材料
reset = False

############ 数据分割 ############

[dataset_GTJ_list_data_test]
class = FilterDataset
input = GTJ_list_data_mergeAll
filters = ("project_id" in x) and ( int(x["project_id"][-5:],16) % 10 < 2 )

[dataset_GTJ_list_data_train]
class = FilterDataset
input = GTJ_list_data_mergeAll
filters = ("project_id" in x) and ( int(x["project_id"][-5:],16) % 10 >= 2 )

[dataset_GTJ_list_data_test_label]
class = MapDataset
input = GTJ_list_data_test
expression = {
    "element_label": list(sorted(x["构件"].split(","))) if x["构件"] is not None else [],
    "material_label": list(sorted(x["材料"].split(","))) if x["材料"] is not None else []
    }
keep_exists = True

[dataset_GTJ_list_data_train_label]
class = MapDataset
input = GTJ_list_data_train
expression = {
    "element_label": list(sorted(x["构件"].split(","))) if x["构件"] is not None else [],
    "material_label": list(sorted(x["材料"].split(","))) if x["材料"] is not None else []
    }
keep_exists = True
