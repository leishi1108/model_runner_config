[DEFAULT]
workspace = /home/shilei/fbpmx/list_item_extract_p2p/list_item_extract_p2p_${date}

[project]
actions = generate
datasets = total1, total2, total1_item, total2_item, total2_quota, total2_cost, total1_item_code1, total2_item_code1

[dataset_total1]
class = ReadRawExcelDataset
dir = /home/shilei/corpus/list_item_p2p_data/导出清单1
header_keywords = 序号, 子目编码, 子目名称, 子目特征描述, 项目编码, 项目名称, 项目特征, 项目特征描述
extra_attr_keywords = 工程名称, 子目名称, 项目名称

[dataset_total2]
class = ReadRawExcelDataset
dir = /home/shilei/corpus/list_item_p2p_data/output9


[dataset_total1_raw_item]
class = FilterDataset
input = total1
filters = "序号" in x and x["序号"] is not None

[dataset_total1_item]
class = MapDataset
input = total1_raw_item
expression = exec('import re; import uuid') or {
    "project_name": re.search(r"工程名称[:：](.*)$", x["extra_attr_工程名称"], flags=re.DOTALL)[1] if x["extra_attr_工程名称"] is not None and "工程名称" in x["extra_attr_工程名称"] else x["extra_attr_工程名称"],
    "project_id": str(uuid.uuid3(uuid.NAMESPACE_DNS, re.search(r"工程名称[:：](.*)$", x["extra_attr_工程名称"], flags=re.DOTALL)[1] if x["extra_attr_工程名称"] is not None and "工程名称" in x["extra_attr_工程名称"] else x["extra_attr_工程名称"])),
    "upper_item_name": x["extra_attr_子目名称"] if x["extra_attr_子目名称"] is not None else x["extra_attr_项目名称"] if x["extra_attr_项目名称"] is not None else "",
    "item_id": "-".join([str(uuid.uuid3(uuid.NAMESPACE_DNS, re.search(r"工程名称[:：](.*)$", x["extra_attr_工程名称"], flags=re.DOTALL)[1] if x["extra_attr_工程名称"] is not None and "工程名称" in x["extra_attr_工程名称"] else x["extra_attr_工程名称"])), str(x["序号"]) ]),
    "item_code": x["子目编码"] if "子目编码" in x else x["项目编码"] if "项目编码" in x else None,
    "item_name": x["子目名称"] if "子目名称" in x else x["项目名称"] if "项目名称" in x else None,
    "item_feature": x["子目特征描述"] if "子目特征描述" in x else x["项目特征"] if "项目特征" in x else None,
    "task_type": "清单"}
keep_exists = True

[dataset_total2_raw_item]
class = FilterDataset
input = total2
filters = "ID" in x and "projectNumber" in x and x["ID"] is not None and x["projectNumber"] is not None

[dataset_total2_item]
class = MapDataset
input = total2_raw_item
expression = exec('import re; import uuid') or {
    "project_id": "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1]),
    "item_id": "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1] + [str(x["ID"])]),
    "item_code": x["projectNumber"] if "projectNumber" in x else None,
    "item_name": x["listName"] if "listName" in x else "",
    "item_feature": x["projectFeature"] if "projectFeature" in x else "",
    "upper_item_name": x["listFullPath"] if "listFullPath" in x else "",
    "task_type": "清单"}
keep_exists = True

[dataset_total2_raw_quota]
class = FilterDataset
input = total2
filters = "ID" in x and "bqId" in x and x["ID"] is not None and x["bqId"] is not None and x["ID"] != x["bqId"]

[dataset_total2_quota]
class = MapDataset
input = total2_raw_quota
expression = exec('import re; import uuid') or {
    "project_id": "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1]),
    'item_id': "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1] + [str(x["bqId"])]),
    "quota_id": "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1] + [str(x["ID"])]),
    "quotaName": x["normItemAttribute"] if "normItemAttribute" in x else "",
    "task_type": "定额"}
keep_exists = True

[dataset_total2_raw_cost]
class = FilterDataset
input = total2
filters = "uid" in x and x["uid"] is not None and "puid" in x and "costSubjectName" in x and x["costSubjectName"] is not None

[dataset_total2_cost]
class = MapDataset
input = total2_raw_cost
expression = exec('import re; import uuid') or {
    "project_id": "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1]),
    'cost_id': "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1] + [str(int(x["uid"]))]),
    "cost_parent_id": "-".join(x["filepath"].split("/")[-1].split("-", -1)[:-1] + [str(int(x["puid"]))]) if x["puid"] is not None else None,
    "cost_name": x["costSubjectName"] if "costSubjectName" in x else "",
    "cost_name_with_upper": x["costSubjectFullPath"] if "costSubjectFullPath" in x else "",
    "task_type": "成本科目"}
keep_exists = True


[dataset_total2_quota_merge]
class = MergeIntoDataset
base_dataset = total2_quota
merge_datasets = total2_item
merge_type = merge_replace
merge_key = item_id
merge_values = item_code, item_name, item_feature, upper_item_name
reset = False


[dataset_total1_item_code1]
class = FilterDataset
input = total1_item
filters = "item_code" in x and x["item_code"] is not None and str(x["item_code"]).startswith("01")

[dataset_total2_item_code1]
class = FilterDataset
input = total2_item
filters = "item_code" in x and x["item_code"] is not None and str(x["item_code"]).startswith("01")