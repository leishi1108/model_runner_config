[DEFAULT]
workspace = /home/shilei/fbpmx/partial_cross_validation/partial_cross_validation_${date}

[project]
actions = generate, evaluate
datasets = test
evaluators = cross_validation_predict


[dataset_test]
class = ReadExcelDataset
dir = /home/shilei/corpus/llm/劳务费用项清单匹配成本科目.xlsx
sheet_names = 分包项目字典成本科目挂接
header_row = 1

[dataset_test_trans]
class = MapDataset
input = test
expression = exec('import re; import uuid') or {'item_id': uuid.uuid4().hex , "item_name": x["分包项目名称"], "item_feature": "", "task_type": "清单"}
keep_exists = True

[model_cde]
class = CdeServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
need_fields = item_name, item_feature

[model_llm_partial]
class = LlmPartialModel
item_name_key = item_name
item_feature_key = item_feature
item_task_type_key = task_type
need_fields = item_name, item_feature, task_type

[evaluator_cross_validation_predict]
class = SimplePredictor
datasets = test_trans
models = cde, llm_partial

#########################################################################################################

[dataset_cde_label_trans]
class = MapDataset
input = cde
expression = exec('import uuid') or {'uid': str(x["ID"]), 'itemName': x.get("清单名称", ""), 'upperItemName': x.get("上级名称", ""), 'projectName': x.get("项目名称", ""), 'itemProperty': x.get("项目特征", "")}
keep_exists = False
reset = True


[model_cde]
class = CdeServiceModel
task_type = 清单
item_name_key = itemName
item_feature_key = itemProperty
need_fields = uid,itemName,upperItemName,projectName,itemProperty
workers = 1

[evaluator_cde_predict]
class = SimplePredictor
datasets = cde_label_trans
models = cde


[dataset_cde_trans]
class = MapDataset
input = cde_label_trans
# expression = {"uid": x.get("uid", ""), "cde_element": list(set([m["item_standard"] for m in x["cde_score"]["debug"]["element"]])), "cde_material": list(set([m["item_standard"] for m in x["cde_score"]["debug"]["material"]])), "cde_element_debug": x["cde_score"]["debug"]["element"], "cde_material_debug": x["cde_score"]["debug"]["material"]}
expression = {"uid": x.get("uid", ""), "cde_element": x["cde_score"]["debug"]["element"], "cde_material": x["cde_score"]["debug"]["material"]}
keep_exists = True
extra_dependencies = evaluator_cde_predict

[dataset_cde_element]
class = FlatListDataset
input = cde_trans
list_key = cde_element


[dataset_cde_material]
class = FlatListDataset
input = cde_trans
list_key = cde_material



[model_llm_material_standard]
class = LlmMaterialStandardModel
url = http://10.0.79.55:9056
item_name_key = itemName
# item_feature_key = itemProperty
item_word_key = cde_material
std_res_key = category
# item_debug_key = cde_material_debug
# need_fields = uid,itemName, upperItemName, projectName, itemProperty, cde_material#, cde_material_debug
need_fields = uid,itemName, upperItemName, projectName, itemProperty, cde_material
workers = 1

[evaluator_llm_material_standard]
class = SimplePredictor
datasets = cde_material
models = llm_material_standard

[dataset_cde_material_map]
class = MapDataset
input = cde_material_filter
expression = {"uid": x.get("uid", ""), "cde_material_category": x["cde_material"]["item_standard"], "llm_material_category": x["llm_material_standard_score"]["item_standard"]}
keep_exists = True
extra_dependencies = evaluator_llm_material_standard

[dataset_cde_material_filter]
class = FilterDataset
input = cde_material
filters = x["cde_material"] is not None

[model_llm_element_standard]
class = LlmElementStandardModel
url = http://10.0.79.55:9056
item_name_key = itemName
# item_feature_key = itemProperty
item_word_key = cde_element
std_res_key = category
# item_debug_key = cde_element_debug
# need_fields = uid,itemName, upperItemName, projectName, itemProperty, cde_element, cde_element_debug
need_fields = uid,itemName, upperItemName, projectName, itemProperty, cde_element
workers = 1

[evaluator_llm_element_standard]
class = SimplePredictor
datasets = cde_element
models = llm_element_standard

[dataset_cde_element_filter]
class = FilterDataset
input = cde_element
filters = x["cde_element"] is not None


[dataset_cde_element_map]
class = MapDataset
input = cde_element_filter
expression = {"uid": x.get("uid", ""), "cde_element_category": x["cde_element"]["item_standard"], "llm_element_category": x["llm_element_standard_score"]["item_standard"]}
keep_exists = True
extra_dependencies = evaluator_llm_element_standard


[stage_element_cross_validation]
class = CrossValStage
dataset = cde_element_map
category_names = cde_element_category,llm_element_category
with_labels = False
save_res_path = /workspace/tmp/demo_element_0409_1.xlsx
filter_key_list = uid,itemName,upperItemName,projectName,itemProperty,cde_element_category,llm_element_category

[stage_material_cross_validation]
class = CrossValStage
dataset = cde_material_map
category_names = cde_material_category,llm_material_category
with_labels = False
save_res_path = /workspace/tmp/demo_material_0409_1.xlsx
filter_key_list = uid,itemName,upperItemName,projectName,itemProperty,cde_material_category,llm_material_category