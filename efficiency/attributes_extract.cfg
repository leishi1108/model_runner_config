[DEFAULT]
workspace = /home/shilei/fbpmx/attributes_extract/attributes_extract_${date}

[project]
actions = generate, evaluate

[evaluators]
keys = cde_predict, llm_element_attr_predict, llm_material_attr_predict

[datasets]
keys = attribute_ner_trans, cde_element, cde_material, llm_element_trans

[dataset_attribute_ner_test]
class = LabelStudioDataset
project_ids = 109

[dataset_attribute_ner]
class = LabelStudioDataset
project_ids = 100,102,104,106,108

[dataset_attribute_ner_trans]
class = MapDataset
input = attribute_ner
expression = exec('import re') or {"item_name": re.search(r"项目名称---\n(.*?)\n---", x["content"], flags=re.DOTALL)[1] if re.search(r"项目名称---\n(.*?)\n---", x["content"], flags=re.DOTALL) is not None else None, "item_feature": re.search(r"项目特征---\n(.*?)\n---", x["content"], flags=re.DOTALL)[1] if re.search(r"项目特征---\n(.*?)\n---", x["content"], flags=re.DOTALL) is not None else None}
keep_exists = True

[dataset_attribute_ner_sample]
class = model_runner.datasets.sorted_dataset.TopKDataset
input = attribute_ner_trans
k = 50


[model_cde]
class = CdeServiceModel
task_type = 清单
item_name_key = item_name
item_feature_key = item_feature
need_fields = item_name,item_feature

[evaluator_cde_predict]
class = SimplePredictor
datasets = attribute_ner_sample
models = cde

[dataset_cde_trans]
class = MapDataset
input = attribute_ner_sample
expression = {"cde_element": list(set([m["item_standard"] for m in x["cde_score"]["debug"]["element"]])), "cde_material": list(set([m["item_standard"] for m in x["cde_score"]["debug"]["material"]])), "cde_element_debug": x["cde_score"]["debug"]["element"], "cde_material_debug": x["cde_score"]["debug"]["material"]}
keep_exists = True
extra_dependencies = evaluator_cde_predict

[dataset_cde_element]
class = FlatListDataset
input = cde_trans
list_key = cde_element

[dataset_cde_material]
class = FlatListDataset
input = cde_trans
list_key = cde_material

[model_llm_element_attr]
class = LlmElementAttrModel
item_name_key = item_name
item_feature_key = item_feature
item_word_key = cde_element
item_debug_key = cde_element_debug
need_fields = item_name, item_feature, cde_element, cde_element_debug

[evaluator_llm_element_attr_predict]
class = SimplePredictor
datasets = cde_element
models = llm_element_attr


[model_llm_material_attr]
class = LlmMaterialAttrModel
item_name_key = item_name
item_feature_key = item_feature
item_word_key = cde_material
item_debug_key = cde_material_debug
need_fields = item_name, item_feature, cde_material, cde_material_debug

[evaluator_llm_material_attr_predict]
class = SimplePredictor
datasets = cde_material
models = llm_material_attr


; [dataset_cde_trans]
; class = MapDataset
; input = attribute_ner_sample
; expression = {"cde_element": list(set([m["item_standard"] for m in x["cde_score"]["debug"]["element"]])), "cde_material": list(set([m["item_standard"] for m in x["cde_score"]["debug"]["material"]])), "cde_element_debug": x["cde_score"]["debug"]["element"], "cde_material_debug": x["cde_score"]["debug"]["material"]}
; keep_exists = True
; extra_dependencies = evaluator_cde_predict
;


[dataset_llm_element_trans]
class = MapDataset
input = cde_element
expression = {"cde_element_name": list(set([m["text"] for m in x["cde_score"]["debug"]["element"]]))}
keep_exists = True
extra_dependencies = evaluator_llm_element_attr_predict
